# -*- coding: utf-8 -*-
"""infyassignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxoBQLqRHx2IPua3nOm0E3oHAiADhRBx

## FoodCorner home delivers vegetarian and non-vegetarian combos to its customer based on order.

A vegetarian combo costs Rs.120 per plate and a non-vegetarian combo costs Rs.150 per plate. Their non-veg combo is really famous that they get more orders for their non-vegetarian combo than the vegetarian combo.

Apart from the cost per plate of food, customers are also charged for home delivery based on the distance in kms from the restaurant to the delivery point. The delivery charges are as mentioned below:

Distance in kms	Delivery charge in Rs per km
For first 3kms	0
For next 3kms	3
For the remaining	6







Given the type of food, quantity (no. of plates) and the distance in kms from the restaurant to the delivery point, write a python program to calculate the final bill amount to be paid by a customer.

The below information must be used to check the validity of the data provided by the customer: 

Type of food must be ‘V’ for vegetarian and ‘N’ for non-vegetarian.
Distance in kms must be greater than 0.
Quantity ordered should be minimum 1.
If any of the input is invalid, the bill amount should be considered as -1.


Estimated Time: 45 minutes
Home
PF Home
"""

def calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):
    bill_amount=0
    if(distance_in_kms>0):
      if(quantity_ordered>=1):
         if(food_type=="N"):
               if(distance_in_kms<=3):
                  bill_amount=150*quantity_ordered
               elif((distance_in_kms>3)and(distance_in_kms<=6)):
                  bill_amount=(150*quantity_ordered)+((distance_in_kms-3)*3)
               else:
                   bill_amount=((150*quantity_ordered)+9+((distance_in_kms-6)*6))
         elif(food_type=="V"):
                 if(distance_in_kms<=3):
                      bill_amount=120*quantity_ordered
                 elif((distance_in_kms>3)and(distance_in_kms<=6)):
                    bill_amount=((120*quantity_ordered)+(distance_in_kms-3)*3)
                 else:
                    bill_amount=((120*quantity_ordered)+9+(distance_in_kms-6)*6)
         else:
               return -1
      else:
         return -1
    else:
       return -1
    return bill_amount

#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program
bill_amount=calculate_bill_amount("N",2,7)
print(bill_amount)

"""Write a python program to solve a classic ancient Chinese puzzle.

We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?

Estimated time: 15 minutes

Sample Input	Expected Output
heads-150 legs-400	100 50
heads-3 legs-11	No solution
heads-3 legs-12	0 3
heads-5 legs-10	5 0

"""

#PF-Assgn-26
def solve(heads,legs):
    error_msg="No solution"
    chicken_count=0
    rabbit_count=0
    ans=False  
    #Populate the variables: chicken_count and rabbit_count
    for i in range(heads+1):
        j=heads-i
        if (2*i)+(4*j)==legs:
            chicken_count=i
            rabbit_count=j
            ans=True
            break
    if (ans==True):
        print(chicken_count,rabbit_count)
    else:
        print(error_msg)
    # Use the below given print statements to display the output
    # Also, do not modify them for verification to work

    #print(chicken_count,rabbit_count)
    #print(error_msg)

#Provide different values for heads and legs and test your program
solve(3,12)

"""Care hospital wants to know the medical speciality visited by the maximum number of patients. Assume that the patient id of the patient along with the medical speciality visited by the patient is stored in a list. The details of the medical specialities are stored in a dictionary as follows:
{
"P":"Pediatrics",
"O":"Orthopedics",
"E":"ENT
}

Write a function to find the medical speciality visited by the maximum number of patients and return the name of the speciality.
Also write the pytest test cases to test the program.

"""

medical_speciality={"P":"Pediatrics","O":"Orthopedics","E":"ENT"}

def max_visited_speciality(patient_medical_speciality_list,medical_speciality):
    p_count=0
    O_count=0
    E_count=0
    for i in range(1,len(patient_medical_speciality_list),2):
        if (patient_medical_speciality_list[i] == "P"):
            p_count+=1
        elif (patient_medical_speciality_list[i] == "O"):
            O_count+=1
        else:
            E_count+=1


    if(p_count > O_count):
        if(p_count > E_count):
            speciality= medical_speciality["P"]
    elif(O_count > E_count):
        if (O_count > p_count):
           speciality= medical_speciality["O"]
    else:
        speciality= medical_speciality["E"]

    return speciality

import pytest
from program import max_visited_speciality

def test_p_visited_speciality():
     medical_speciality={"P":"Pediatrics","O":"Orthopedics","E":"ENT"}
     values=[301,'P',302, 'P' ,305, 'P' ,401, 'E' ,656, 'E']

     val=max_visited_speciality(values,medical_speciality)
     assert val == "Pediatrics"

def test_o_visited_speciality():
    medical_speciality={"P":"Pediatrics","O":"Orthopedics","E":"ENT"}
    values=[301,'E',302, 'O' ,305, 'O' ,401, 'E' ,656, 'O']

    val=max_visited_speciality(values,medical_speciality)
    assert val == "Orthopedics"
def test_e_visited_speciality():
    medical_speciality={"P":"Pediatrics","O":"Orthopedics","E":"ENT"}
    values=[301,'E',302, 'E' ,305, 'E' ,401, 'E' ,656, 'O']

    val=max_visited_speciality(values,medical_speciality)
    assert val == "ENT"