# -*- coding: utf-8 -*-
"""infyassignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nV6gJoFL8GV3DPutWqEPWMFrLod5u20m

9.Continuing with the previous scenario, a student eligible for admission has to choose a course and pay the fees for it. If they have scored more than 85 marks in qualifying exam, they get 25% discount on fees.


Valid course ids and fees are given below:
course id	fees
1001	25575.0
1002	15500.0
Extend the program written in the previous assignment to include the above requirement.
"""

class Student:
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None
        self.__course_id=None
        self.__fees=None
    def validate_marks(self):
        if (self.__marks>=0 and self.__marks<=100):
            return True
        else:
            return False
    def validate_age(self):
        if(self.__age>20):
            return True
        else:
            return False
    def check_qualification(self):
        if(self.validate_age() and self.validate_marks()):
            if(self.__marks >= 65):
                return True
            else:
                return False
        else:
            return False
    def choose_course(self,course_id):
        self.__course_id=course_id
        if(self.__course_id==1001 or self.__course_id==1002):
            if(self.__course_id==1001):
               if(self.__marks>85):
                  self.__fees=((25575.0 -(25575.0 *(25/100))))
               else:
                   self.__fees=25575.0
            if(self.__course_id==1002):
               if(self.__marks>85):
                  self.__fees=(( 15500.0-(15500.0 *(25/100))))
               else:
                   self.__fees=15500.0
        else:
            return False
    def set_student_id(self, student_id):
        self.__student_id=student_id
    def get_student_id(self):
        return self.__student_id
    def set_marks(self, marks):
        self.__marks=marks
    def get_marks(self):
        return self.__marks
    def set_age(self, age):
        self.__age=age
    def get_age(self):
        return self.__age
    def set_course_id(self,course_id):
        self.__course_id=course_id
    def get_course_id(self):
        return self.__course_id
    def get_fees(self):
        return self.__fees

maddy=Student()
maddy.set_student_id(1002)
maddy.set_age(21)
maddy.set_marks(100)
if(maddy.check_qualification()):
    print("Student has qualified")
    if(maddy.choose_course(1001)):
        print("Course allocated")
    else:
        print("Invalid course id")
else:
    print("Student has not qualified")

"""A telecom company wants to generate reports on the call details of the customers.20 min
The data of each call detail include the phone number which made the call, phone number which was called, duration of the call and the type of call. Data of such calls are provided as a list of comma separated string.
"""

class CallDetail:
    def __init__(self,phoneno,called_no,duration,call_type):
        self.__phoneno=phoneno
        self.__called_no=called_no
        self.__duration=duration
        self.__call_type=call_type
        
    

class Util:
    def __init__(self):
        self.list_of_call_objects=None

    def parse_customer(self,list_of_call_string):
        self.list_of_call_objects=[]
        for i in list_of_call_string:
            phoneno,called_no,duration,call_type=map(str,i.split(","))
            self.list_of_call_objects.append(CallDetail(phoneno,called_no,duration,call_type))


call='9990000001,9330000001,23,STD'
call2='9990000001,9330000002,54,Local'
call3='9990000001,9330000003,6,ISD'

list_of_call_string=[call,call2,call3]
Util().parse_customer(list_of_call_string)